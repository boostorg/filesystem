[/
 / Copyright Andrey Semashev 2024.
 /
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at
 / https://www.boost.org/LICENSE_1_0.txt)
 /]

[section:issue_reporting Issue reporting]

Boost.Filesystem issues such as bug reports or feature requests should be reported via a [@https://github.com/boostorg/filesystem/issues/new
GitHub ticket].

[@https://github.com/boostorg/filesystem/pulls GitHub pull requests] are encouraged, too, although anything beyond really trivial fixes needs
a ticket.

A timely response to your bug report is much more likely if [*the problem can be immediately reproduced without guesswork and regression tests
can be easily created].

You need to provide the following:

# A simple test program that:
  * Illustrates the problem, and
  * Automatically yields an unambiguous pass or fail result - returning zero for pass and non-zero for fail is preferred, and
  * Can be used as the basis for adding tests to Boost.Filesystem's regression test suite.
# The compiler, standard library, platform, and Boost version you used to build and run your test program.
# A description of how to build and run the test program.
# A copy of the output from the test program, if any.

See [link filesystem.issue_reporting.rationale Rationale] to find out why the above is needed.

For a mostly automatic framework to provide the above, read on!

[section:framework Bug reporting framework]

The directory [^['[*boost-root]]\/libs\/filesystem\/bug] provides a bug test program ([link filesystem.issue_reporting.using_framework.bug_cpp
`bug.cpp`]) and a build file (`Jamfile.v2`). Here is what you need to do:

# Add one or more test cases to [link filesystem.issue_reporting.using_framework.bug_cpp `bug.cpp`] using any text or program editor.
# [link filesystem.issue_reporting.using_framework.build_and_test Build and test].
# Attach copies of the [link filesystem.issue_reporting.using_framework.test_output Test output] and test program to the
  [@https://github.com/boostorg/filesystem/issues/new GitHub ticket].

That's it! When you complete those steps, you will be done!

The test output supplies all of the basic information about the compiler, std library, platform, Boost version, and command line, and the test
cases you have added should make it easy for the library maintainer to reproduce the problem.

[endsect]

[section:using_framework Using the framework]

[section:bug_cpp `bug.cpp`]

Here is `bug.cpp` as supplied. To report a real bug, use `BOOST_TEST` and `BOOST_TEST_EQ` macros to build your own test cases. You can delete
the three tests already in `bug.cpp`:

[import ../bug/bug.cpp]
[bug_cpp]

[endsect]

[section:build_and_test Build and test]

[table
[[POSIX-like systems] [Microsoft Windows]]
[[
[pre
cd <boost-root>\/libs\/filesystem\/bug
..\/..\/..\/b2 -a
bin\/bug
]
]
[
[pre
cd <boost-root>\\libs\\filesystem\\bug
..\\..\\..\\b2 -a
bin\\bug
]
]]
]

[endsect]

[section:test_output Test output]

Running the test on Windows produced this test output:

[pre
Microsoft Visual C++ version 14.0
Dinkumware standard library version 610
Win32
Boost version 1.58.0
Command line: bin\\bug
bug.cpp(10): test '2 + 2 == 5' failed in function
  'int __cdecl test_main(int,char *\[\])'
bug.cpp(11): test '4 + 4 == 9' failed in function
  'int __cdecl test_main(int,char *\[\])': '8' != '9'
2 errors detected.
]

The test framework runs `test_main()` from a `try` block with a `catch` block that reports exceptions via `std::exception::what()`. So the output
will differ if an exception is thrown.

[endsect]

[section:background_info Background information]

You should now have enough information to file an easy-to-reproduce bug report. So you can skip reading the rest of this page unless you need
to do something a bit out of the ordinary.

[section:b2_command_line_options `b2` command line]

`b2` (formerly `bjam`) usage:

[pre
b2 \[options\] \[properties\] \[target\]
]

__boost_build__ `b2` has many options, properties, and targets, but you will not need most of them for bug reporting. Here are a few you might
find helpful:

[table `b2` Options
[[Option] [Effect]]
[[[pre -a]]
[
Rebuild everything rather than just out-of-date targets. Used in the example build above to ensure libraries are built with the same setup
as the test program.
]]
]

[table `b2` Properties
[[Property] [Effect]]
[[[pre address-model=['n]]

where ['n] is 32 or 64.]
[
Explicitly request either 32-bit or 64-bit code generation. This typically requires that your compiler is appropriately configured.
]]
[[[pre variant=['string]]

where ['string] is `debug` or `release`.]
[
Request debug or release build.
]]
[[[pre toolset=['string]]

where ['string] is composed of the compiler name and optionally, a version.]
[
The C++ compiler to use. For example, `gcc`, `gcc-4.9`, `clang-3.3`, or `msvc-14.0`. If the version is imitted, the default compiler version
is used.
]]
[[[pre include=['string]]]
[
Additional include paths for C and C++ compilers.
]]
[[[pre cxxflags=['string]]]
[
Custom options to pass to the C++ compiler.
]]
[[[pre define=['string]]]
[
Additional macro definitions for C and C++ compilers. ['string] should be either `SYMBOL` or `SYMBOL=VALUE`
]]
]

[endsect]

[endsect]

[endsect]

[section:rationale Rationale]

Here is the request list again, with rationale added:

# A simple test program that:
  * Illustrates the problem ['\[Code communicates more clearly than prose. If it looks like it will it will take some time to figure out
    exactly what the problem is, or worse yet, might result in a wild-goose chase, the bug report gets set aside to be worked on later and
    then is often forgotten.\]] and
  * Automatically yields an unambiguous pass or fail result - returning zero for pass and non-zero for fail is preferred ['\[Prevents
    miscommunications and allows use in automatic regression tests.\]], and
  * Can be used as the basis for adding tests to Boost.Filesystem's regression test suite ['\[With good test cases fixes come easier and
    regressions become less likely\]].
# The compiler, standard library, platform, and Boost version you used to build and run your test program. ['\[The implementation includes
  much platform dependent code, and also depends on the other factors mentioned. Know these things upfront brings the bug report into focus
  without having to ask for more information.\]]
# A description of how to build and run the test program. ['\[If `b2` (formerly known as `bjam`) is used as the build engine, this is not
  a concern, but otherwise much more information is needed.\]]
# A copy of the output from the test program, if any. ['\[Avoids misinterpreting results.\]]

[endsect]

[endsect]
